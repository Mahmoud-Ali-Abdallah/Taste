@page "/Admin/User/Index"

@inject IUserService _userService
@inject IJSRuntime  _js
@inject Blazored.Toast.Services.IToastService ToastService

@implements IAsyncDisposable

<div class="border backgroundWhite container">
    <div class="row">
        <div class="col-6">
            <h2 class="text-primary">User List</h2>
        </div>
        <div class="col-6" style="text-align:end">
            <a href="/Account/Register" class="btn btn-primary"><i class="fas fa-plus"></i> &nbsp;Create New</a>
        </div>
    </div>
    <br /><br />
    <table id="userList" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th></th>

            </tr>
        </thead>
        <tbody>

            @if (users != null) //&& categories.Count > 0)
            {
                //LoadDataTable();

                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.FullName</td>
                        <td>@user.UserName</td>
                        <td>@user.PhoneNumber</td>
                        
                        <td>
                            @if (user.LockOutEndDate > DateTime.Now)
                            {
                                // Currently user is locked
                            <button @onclick="() => LockUnlock(user.Id)" class="btn btn-success"> <i class="fas fa-lock-open"></i>&nbsp;&nbsp;Unlock</button>
                            }
                            else
                            {
                                // Currently user is unlocked
                        <button @onclick="() => LockUnlock(user.Id)" class="btn btn-danger"><i class="fas fa-lock"></i>&nbsp;&nbsp;Lock</button>
                            }
                            
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
</div>
@code {

    // Load the module and keep a reference to it
    // You need to use .AsTask() to convert the ValueTask to Task as it may be awaited multiple times
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??=
        _js.InvokeAsync<IJSObjectReference>("import", "./js/category.js").AsTask();

    IJSObjectReference module;

    List<ApplicationUserModel> users = new();


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            users = (await _userService.GetAllUsers()).ToList();
            StateHasChanged();
            module = await Module;

            await module.InvokeVoidAsync("initializeDataTable", "userList");

        }
    }

    private async Task LockUnlock(string userId)
    {
        bool res = await _userService.LockUnlock(userId);

        if (res)
        {
            // Display Successful Message
        }
        else 
        {
        }

        await OnAfterRenderAsync(true);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

}
